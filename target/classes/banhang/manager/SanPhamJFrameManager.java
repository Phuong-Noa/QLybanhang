/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package banhang.manager;

import banhang.dao.LoaiSanPhamDAO;
import banhang.dao.SanPhamDAO;
import banhang.dao.impl.LoaiSanPhamDAOImpl;
import banhang.dao.impl.SanPhamDAOImpl;
import banhang.entity.LoaiSanPham;
import banhang.entity.SanPham;
import banhang.util.XDialog;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class SanPhamJFrameManager extends javax.swing.JFrame implements SanPhamController{

    /**
     * Creates new form SanPhamJDialog
     */
    public SanPhamJFrameManager() {
        initComponents();
        ImageIcon icon = new ImageIcon(getClass().getResource("/banhang/icons/trump-small.png"));
        setIconImage(icon.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoaiSanPham = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrevious = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnCheckAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtMasp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTensp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtGia = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        cboLoaiSanPham = new javax.swing.JComboBox<>();
        cboNuocSX = new javax.swing.JComboBox<>();
        cboDVT = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QU·∫¢N L√ù S·∫¢N PH·∫®M");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblLoaiSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lo·∫°i s·∫£n ph·∫©m"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLoaiSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoaiSanPhamMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLoaiSanPham);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "M√£ s·∫£n ph·∫©m", "T√™n s·∫£n ph·∫©m", "ƒê∆°n v·ªã t√≠nh", "N∆∞·ªõc s·∫£n xu·∫•t", "Gi√°", "T√™n lo·∫°i", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSanPham);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnMoveFirst.setText("|<");
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnMovePrevious.setText("<<");
        btnMovePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePreviousActionPerformed(evt);
            }
        });

        btnMoveNext.setText(">>");
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMoveLast.setText(">|");
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setText("üóëÔ∏è X√≥a c√°c m·ª•c ch·ªçn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        btnUncheckAll.setText("‚ùé B·ªè ch·ªçn t·∫•t c·∫£");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnCheckAll.setText("‚úÖ Ch·ªçn t·∫•t c·∫£");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnMoveFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMovePrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveLast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUncheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteCheckedItems)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnMoveFirst)
                        .addComponent(btnMovePrevious)
                        .addComponent(btnMoveNext)
                        .addComponent(btnMoveLast))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCheckAll)
                        .addComponent(btnUncheckAll)
                        .addComponent(btnDeleteCheckedItems)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("TH√îNG TIN:");

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("M√£ s·∫£n ph·∫©m:");

        jLabel3.setText("T√™n s·∫£n ph·∫©m:");

        jLabel4.setText("ƒê∆°n v·ªã t√≠nh");

        jLabel5.setText("N∆∞·ªõc s·∫£n xu·∫•t:");

        jLabel6.setText("Gi√°:");

        jLabel7.setText("T√™n lo·∫°i:");

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnSearch.setText("üîçT√¨m ki·∫øm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCreate.setText("‚ûï T·∫°o m·ªõi");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnClear.setText("üîÑ Nh·∫≠p m·ªõi");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setText("üóëÔ∏è Xo√°");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("üìùÔ∏è C·∫≠p nh·∫≠t");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRefresh.setText("L√†m m·ªõi");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdate)
                            .addComponent(btnClear))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnClear))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cboNuocSX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Viet Nam", "Trung Quoc", "Thai Lan", "Singapore" }));

        cboDVT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cay", "hop", "quyen", "cai", "chuc", " " }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboLoaiSanPham, 0, 201, Short.MAX_VALUE)
                    .addComponent(txtMasp, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(txtTensp)
                    .addComponent(txtGia)
                    .addComponent(cboNuocSX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboDVT, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(199, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtMasp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtTensp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cboDVT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cboNuocSX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboLoaiSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        // TODO add your handling code here:
            if (evt.getClickCount() == 2) {
            this.edit();
        }
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        // TODO add your handling code here:
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePreviousActionPerformed
        // TODO add your handling code here:
        this.movePrevious();
    }//GEN-LAST:event_btnMovePreviousActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
        this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void tblLoaiSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoaiSanPhamMouseClicked
        // TODO add your handling code here:
        this.fillSanPhamTheoLoai();
    }//GEN-LAST:event_tblLoaiSanPhamMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        this.search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        this.refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SanPhamJFrameManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SanPhamJFrameManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SanPhamJFrameManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SanPhamJFrameManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SanPhamJFrameManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrevious;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboDVT;
    private javax.swing.JComboBox<String> cboLoaiSanPham;
    private javax.swing.JComboBox<String> cboNuocSX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblLoaiSanPham;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTextField txtGia;
    private javax.swing.JTextField txtMasp;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTensp;
    // End of variables declaration//GEN-END:variables

    SanPhamDAO dao = new SanPhamDAOImpl();
    List<SanPham> items = List.of();
    List<LoaiSanPham> loaisanpham = List.of();
    
    @Override
    public void fillLoaiSanPham() {
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboLoaiSanPham.getModel();
        cboModel.removeAllElements();

        DefaultTableModel tblModel = (DefaultTableModel) tblLoaiSanPham.getModel();
        tblModel.setRowCount(0);

        LoaiSanPhamDAO cdao = new LoaiSanPhamDAOImpl();
        loaisanpham = cdao.findAll();

        loaisanpham.forEach(category -> {
            cboModel.addElement(category);
            tblModel.addRow(new Object[]{category.getTenloai()});
        });

        if (!loaisanpham.isEmpty()) {
            tblLoaiSanPham.setRowSelectionInterval(0, 0);
            int  maloai = loaisanpham.get(0).getMaloai();
            this.fillSanPhamTheoLoai(); // => load b·∫£ng tblSanPham theo lo·∫°i
        }
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillLoaiSanPham();
        this.clear();
        this.validateGia();
    }

    @Override
    public void setForm(SanPham entity) {
        txtMasp.setText(String.valueOf(entity.getMasp()));
        txtTensp.setText(entity.getTensp());
        cboDVT.setSelectedItem(entity.getDvt());
        cboNuocSX.setSelectedItem(entity.getNuocsx());
        //txtGia.setText(String.valueOf(entity.getGia()));
        txtGia.setText(String.valueOf(entity.getGia()));
        // T√¨m ƒë√∫ng LoaiSanPham c√≥ m√£ tr√πng v·ªõi s·∫£n ph·∫©m
        /*for (LoaiSanPham loai : loaisanpham) {
            if (loai.getMaloai().equals(entity.getMaloai())) {
                cboLoaiSanPham.setSelectedItem(loai);
                break;
            }
        }*/
        LoaiSanPham loai = loaisanpham.get(tblLoaiSanPham.getSelectedRow());
        cboLoaiSanPham.setSelectedItem(loai);
    }

    @Override
    public SanPham getForm() {
        SanPham entity = new SanPham();
        if (!txtMasp.getText().isEmpty()) {
            // Ch·ªâ set manv n·∫øu ƒëang trong ch·∫ø ƒë·ªô c·∫≠p nh·∫≠t (update)
            entity.setMasp(Integer.parseInt(txtMasp.getText()));
        }
        entity.setTensp(txtTensp.getText());
        entity.setDvt(cboDVT.getSelectedItem().toString());
        entity.setNuocsx(cboNuocSX.getSelectedItem().toString());
        entity.setGia(Double.parseDouble(txtGia.getText()));
        LoaiSanPham loai = loaisanpham.get(cboLoaiSanPham.getSelectedIndex());
        entity.setMaloai(loai.getMaloai());
        return entity;
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0);

        items = dao.findAll();
        items.forEach(item -> {
            Object[] rowData = {
                item.getMasp(),
                item.getTensp(),
                item.getDvt(),
                item.getNuocsx(),
                String.format("%,.0f VNƒê", item.getGia()), // <-- th√™m ƒë∆°n v·ªã ·ªü ƒë√¢y
//                item.getMaloai(),
                item.getTenloai(),
                false
            };
            model.addRow(rowData);
        });
    }

    @Override
    public void edit() {
        SanPham entity = items.get(tblSanPham.getSelectedRow());
        this.setForm(entity);
        this.setEditable(true);
    }

    @Override
    public void create() {
        try {
            SanPham entity = this.getForm();

            // Ki·ªÉm tra r·ªóng
            if (entity.getTensp().isEmpty() || entity.getDvt().isEmpty() || entity.getNuocsx().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Ki·ªÉm tra gi√° h·ª£p l·ªá
            if (entity.getGia() <= 0) {
                XDialog.alert("Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0.");
                return;
            }

            dao.create(entity);
            this.fillSanPhamTheoLoai();
            this.clear();
            XDialog.alert("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
        } catch (NumberFormatException e) {
            XDialog.alert("Gi√° kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
        }
    }

    @Override
    public void update() {
        // L·∫•y m√£ lo·∫°i hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã l·∫°i ƒë√∫ng lo·∫°i
        //String maloai = entity.getMaloai();
        try {
            SanPham entity = this.getForm();

            // Ki·ªÉm tra r·ªóng
            if (entity.getTensp().isEmpty() || entity.getDvt().isEmpty() || entity.getNuocsx().isEmpty()) {
                XDialog.alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m.");
                return;
            }

            if (entity.getGia() <= 0) {
                XDialog.alert("Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0.");
                return;
            }

            dao.update(entity);
            this.fillSanPhamTheoLoai();
            XDialog.alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
        } catch (NumberFormatException e) {
            XDialog.alert("Gi√° kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.");
        } catch (Exception e) {
            XDialog.alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i.");
        }
    }

    @Override
    public void delete() {
        int selectedRow = tblSanPham.getSelectedRow();
        if (selectedRow == -1) {
            XDialog.alert("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn xo√° trong b·∫£ng.");
            return;
        }

        if (XDialog.confirm("B·∫°n th·ª±c s·ª± mu·ªën xo√° s·∫£n ph·∫©m n√†y?")) {
            try {
                int masp = Integer.parseInt(tblSanPham.getValueAt(selectedRow, 0).toString());
                dao.deleteById(masp);

                // Ki·ªÉm tra l·∫°i lo·∫°i s·∫£n ph·∫©m ƒëang ch·ªçn, r·ªìi load l·∫°i s·∫£n ph·∫©m theo lo·∫°i
                int selectedLoaiRow = tblLoaiSanPham.getSelectedRow();
                if (selectedLoaiRow >= 0) {
                    this.fillSanPhamTheoLoai();  // Hi·ªÉn th·ªã l·∫°i danh s√°ch theo lo·∫°i ƒëang ch·ªçn
                } else {
                    fillToTable();  // N·∫øu kh√¥ng ch·ªçn lo·∫°i n√†o, load to√†n b·ªô
                }

                this.clear();
                XDialog.alert("Xo√° s·∫£n ph·∫©m th√†nh c√¥ng!");
            } catch (Exception e) {
                XDialog.alert("Xo√° s·∫£n ph·∫©m th·∫•t b·∫°i.");
            }
        }
    }

    @Override
    public void clear() {
        SanPham sp = new SanPham();

        // L·∫•y m√£ lo·∫°i hi·ªán t·∫°i t·ª´ combobox
        Object selectedItem = cboLoaiSanPham.getSelectedItem();
        if (selectedItem instanceof LoaiSanPham) {
            int  maLoai = ((LoaiSanPham) selectedItem).getMaloai();
            sp.setMasp(generateNewMaSP());
            sp.setMaloai(maLoai); // G√°n l·∫°i m√£ lo·∫°i
        }

        this.setForm(sp);
        this.setEditable(false);
//        this.setForm(new SanPham());
//        this.setEditable(false);
    }

    @Override
    public void setEditable(boolean editable) {
        txtMasp.setEnabled(false);           // Lu√¥n t·∫Øt m√£ s·∫£n ph·∫©m
        cboLoaiSanPham.setEditable(false);    //Lu√¥n t·∫Øt combo m√£ lo·∫°i
        btnCreate.setEnabled(!editable);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);

        int rowCount = tblSanPham.getRowCount();
        btnMoveFirst.setEnabled(editable && rowCount > 0);
        btnMovePrevious.setEnabled(editable && rowCount > 0);
        btnMoveNext.setEnabled(editable && rowCount > 0);
        btnMoveLast.setEnabled(editable && rowCount > 0);
    }

    @Override
    public void checkAll() {
        this.setCheckedAll(true);
    }

    @Override
    public void uncheckAll() {
        this.setCheckedAll(false);
    }

    @Override
    public void deleteCheckedItems() {
        boolean hasChecked = false;
        for (int i = 0; i < tblSanPham.getRowCount(); i++) {
            if ((Boolean) tblSanPham.getValueAt(i, 6)) {
                hasChecked = true;
                break;
            }
        }

        if (!hasChecked) {
            XDialog.alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xo√°.");
            return;
        }

        if (XDialog.confirm("B·∫°n th·ª±c s·ª± mu·ªën x√≥a c√°c m·ª•c ƒë√£ ch·ªçn?")) {
            int deletedCount = 0;
            for (int i = 0; i < tblSanPham.getRowCount(); i++) {
                if ((Boolean) tblSanPham.getValueAt(i, 6)) {
                    dao.deleteById(items.get(i).getMasp());
                    deletedCount++;
                }
            }

            int selectedRow = tblLoaiSanPham.getSelectedRow();
            if (selectedRow >= 0) {
                int maloai = loaisanpham.get(selectedRow).getMaloai();
                this.fillSanPhamTheoLoai();
            } else {
                fillToTable();
            }

            XDialog.alert("ƒê√£ xo√° " + deletedCount + " s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn.");
        }
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        this.moveTo(tblSanPham.getSelectedRow() - 1);
    }

    @Override
    public void moveNext() {
        this.moveTo(tblSanPham.getSelectedRow() + 1);
    }

    @Override
    public void moveLast() {
        this.moveTo(tblSanPham.getRowCount() - 1);
    }

    @Override
    public void moveTo(int index) {
        if (index < 0) {
            this.moveLast();
        } else if (index >= tblSanPham.getRowCount()) {
            this.moveFirst();
        } else {
            tblSanPham.clearSelection();
            tblSanPham.setRowSelectionInterval(index, index);
            this.edit();
        }
    }

    private void setCheckedAll(boolean checked) {
        for (int i = 0; i < tblSanPham.getRowCount(); i++) {
            tblSanPham.setValueAt(checked, i, 6);
        }
    }

    @Override
    public void fillSanPhamTheoLoai() {
//        int selectedRow = tblLoaiSanPham.getSelectedRow();
//        if (selectedRow >= 0) {
//            int maloai = loaisanpham.get(selectedRow).getMaloai();
//
//            DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
//            model.setRowCount(0);
//
//            items = dao.findByMaLoai(maloai); // DAO ƒë√£ c√≥ s·∫µn h√†m n√†y
//            int stt = 1;
//            for (SanPham item : items) {
//                model.addRow(new Object[]{
//                    stt++, // STT b·∫Øt ƒë·∫ßu t·ª´ 1
//                    item.getTensp(),
//                    item.getDvt(),
//                    item.getNuocsx(),
//                    item.getGia(),
//                    item.getMaloai(),
//                    false
//                });
//            }
//            this.clear(); // reset form
//            // txtMasp.setText(generateMaSPTheoLoai(maloai));
//        }
        int selectedRow = tblLoaiSanPham.getSelectedRow();
        if (selectedRow >= 0) {
            int maloai = loaisanpham.get(selectedRow).getMaloai();

            DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
            model.setRowCount(0);

            items = dao.findByMaLoai(maloai); // DAO ƒë√£ c√≥ s·∫µn h√†m n√†y
            for (SanPham item : items) {
                model.addRow(new Object[]{
                    item.getMasp(),
                    item.getTensp(),
                    item.getDvt(),
                    item.getNuocsx(),
                    String.format("%,.0f VNƒê", item.getGia()), // <-- th√™m ƒë∆°n v·ªã ·ªü ƒë√¢y
//                    item.getMaloai(),
                    item.getTenloai(),
                    false
                });
            }
            this.clear(); // reset form
        }
    }

    @Override
    public void search() {
        String keyword = txtSearch.getText().trim();
        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();

        if (keyword.isEmpty()) {
            XDialog.alert("Vui l√≤ng nh·∫≠p m√£,t√™n ho·∫∑c lo·∫°i ƒë·ªÉ t√¨m ki·∫øm!");
            this.fillSanPhamTheoLoai();
            return;
        }

        try {
            // N·∫øu l√† s·ªë ‚Üí t√¨m theo MASP
            int id = Integer.parseInt(keyword);
            SanPham sp = dao.findById(id);
            if (sp != null) {
                items = List.of(sp);
            } else {
                items = dao.findByName(keyword);
            }
        } catch (NumberFormatException e) {
            // N·∫øu kh√¥ng ph·∫£i s·ªë ‚Üí t√¨m theo t√™n
            items = dao.findByName(keyword);
        }

        // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ‚Üí th·ª≠ t√¨m theo m√£ lo·∫°i
        if (items == null || items.isEmpty()) {
            int maloai = Integer.parseInt(keyword);
            items = dao.findByMaLoai(maloai);  // G·ªåI H√ÄM DAO CH√çNH X√ÅC ·ªû ƒê√ÇY
        }

        // N·∫øu v·∫´n kh√¥ng c√≥ g√¨ ‚Üí b√°o kh√¥ng t√¨m th·∫•y
        if (items == null || items.isEmpty()) {
            XDialog.alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi m√£, t√™n ho·∫∑c lo·∫°i: " + keyword);
            this.fillSanPhamTheoLoai();
            return;
        }

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        model.setRowCount(0); // Clear b·∫£ng
        for (SanPham item : items) {
            model.addRow(new Object[]{
                item.getMasp(),
                item.getTensp(),
                item.getDvt(),
                item.getNuocsx(),
                String.format("%,.0f VNƒê", item.getGia()), // <-- th√™m ƒë∆°n v·ªã ·ªü ƒë√¢y
                item.getTenloai(),
                false
            });
        }
    }

    @Override
    public void refresh() {
        txtSearch.setText("");             // Xo√° n·ªôi dung √¥ t√¨m ki·∫øm
        this.fillSanPhamTheoLoai();            // Hi·ªÉn th·ªã l·∫°i s·∫£n ph·∫©m theo lo·∫°i ƒëang ch·ªçn
        XDialog.alert("ƒê√£ l√†m m·ªõi danh s√°ch s·∫£n ph·∫©m.");  // C√≥ th·ªÉ b·ªè d√≤ng n√†y n·∫øu kh√¥ng mu·ªën hi·ªÉn th·ªã th√¥ng b√°o 
    }
    
    @Override
    public void validateGia() {
        txtGia.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                char c = evt.getKeyChar();
                String text = txtGia.getText();

                // Cho ph√©p s·ªë, ph√≠m ƒëi·ªÅu khi·ªÉn (backspace...), v√† 1 d·∫•u ch·∫•m
                if (!Character.isDigit(c) && c != '.' && !Character.isISOControl(c)) {
                    evt.consume(); // kh√¥ng cho nh·∫≠p k√Ω t·ª± kh√°c
                }

                // Kh√¥ng cho nh·∫≠p nhi·ªÅu h∆°n 1 d·∫•u ch·∫•m
                if (c == '.' && text.contains(".")) {
                    evt.consume();
                }
            }
        });
    }

    

    @Override
    public int generateNewMaSP() {
        int rowCount = tblSanPham.getRowCount();
        int max = 0;

        for (int i = 0; i < rowCount; i++) {
            int masp = Integer.parseInt(tblSanPham.getValueAt(i, 0).toString());
            if (masp > max) {
                max = masp;
            }
        }

        return max + 1;
    }
}
