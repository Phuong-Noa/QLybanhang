/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package banhang.staff;

import banhang.dao.CTHDDAO;
import banhang.dao.HoaDonDAO;
import banhang.dao.impl.CTHDDAOImpl;
import banhang.dao.impl.HoaDonDAOImpl;
import banhang.entity.CTHD;
import banhang.entity.HoaDon;
import banhang.util.XAuth;
import banhang.util.XDate;
import banhang.util.XDialog;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import lombok.Setter;

/**
 *
 * @author ADMIN
 */
public class SalesJFrame extends javax.swing.JFrame implements SalesController{

    /**
     * Creates new form SalesJFrame
     */
    public SalesJFrame() {
        initComponents();
        ImageIcon icon = new ImageIcon(getClass().getResource("/banhang/icons/trump-small.png"));
        setIconImage(icon.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSoHD = new javax.swing.JTextField();
        txtMaNV = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNGHD = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCTHD = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BÁN HÀNG");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Số hoá đơn:");

        jLabel2.setText("Mã nhân viên:");

        jLabel3.setText("Ngày lập hoá đơn:");

        tblCTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Mã hoá đơn", "Số hoá đơn", "Mã sản phẩm", "Tên sản phẩm", "Đơn giá", "Số lượng", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCTHD);

        btnRemove.setText("Xoá sản phẩm");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm sản phẩm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnCancel.setText("Huỷ thanh toán");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnCheckout.setText("Thanh toán");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtNGHD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 234, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCheckout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNGHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnAdd)
                    .addComponent(btnCancel)
                    .addComponent(btnCheckout))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.close();
    }//GEN-LAST:event_formWindowClosed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        this.ShowSanPhamJFrame();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        this.removeSanPham();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        this.checkout();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCTHD;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtNGHD;
    private javax.swing.JTextField txtSoHD;
    // End of variables declaration//GEN-END:variables

    @Setter
    HoaDon hoadon;
    List<CTHD> cthd = new ArrayList<>();
    
    HoaDonDAO hoadonDao = new HoaDonDAOImpl();
    CTHDDAO cthdDao = new CTHDDAOImpl();
    
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        if (hoadon == null) {
//            hoadon = new HoaDon(); // ✅ Thêm dòng này để tránh NullPointerException
            hoadon = hoadonDao.findById(1000);
            hoadon.setManv(XAuth.user.getManv()); // ✅ Lấy từ người đăng nhập
//            hoadonDao.create(hoadon); // ✅ Tùy chọn: nếu bạn muốn lưu luôn hoadon mới vào DB
        }
        this.setForm(hoadon);
        this.fillCTHD();
        txtSoHD.setEditable(false);
        txtMaNV.setEditable(false);
        txtNGHD.setEditable(false);
    }

    @Override
    public void close() {
        if (hoadon != null && cthd.isEmpty()) {
            hoadonDao.deleteById(hoadon.getSohd());
        }
//        if (cthd.isEmpty()) {
//            hoadonDao.deleteById(hoadon.getSohd());
//        }
    }

//    @Override
//    public void cancel() {
//        if (cthd.isEmpty()) {
//            hoadonDao.deleteById(hoadon.getSohd());
//            this.dispose();
//        } else if (XDialog.confirm("Bạn muốn hủy phiếu bán hàng?")) {
//            hoadonDao.update(hoadon);
//            this.setForm(hoadon);
//        }
//    }
    @Override
    public void cancel() {
        if (cthd.isEmpty()) {
            XDialog.alert("Hoá đơn này đã trống, không có sản phẩm để huỷ!");
            return;
        }

        if (XDialog.confirm("Bạn muốn huỷ toàn bộ sản phẩm trong hoá đơn này không?")) {
            // Xoá toàn bộ chi tiết hóa đơn, giữ lại hoá đơn trống
            for (CTHD ct : cthd) {
                cthdDao.deleteById(ct.getMahd());
            }

            cthd.clear();
            fillCTHD();
            XDialog.alert("Đã xoá toàn bộ sản phẩm trong hoá đơn.\n(Hoá đơn vẫn được giữ lại)");
        }
    }


        @Override
    public void ShowSanPhamJFrame() {
        try {
            SanPhamJFrame frame = new SanPhamJFrame();
            HoaDon hoadon = new HoaDon(); // hoặc lấy từ DB
            frame.setHoaDon(this.hoadon); // Truyền hóa đơn hiện tại
            frame.setVisible(true);

            frame.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent e) {
                    fillCTHD(); // Load lại chi tiết hóa đơn sau khi chọn xong sản phẩm
                }

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    fillCTHD(); // Gọi khi nhấn nút (X)
                }
            });
        } catch (Exception e) {
        }
    }

    @Override
    public void removeSanPham() {
        boolean hasSelected = false;
        for (int i = 0; i < tblCTHD.getRowCount(); i++) {
            Boolean checked = (Boolean) tblCTHD.getValueAt(i, 0);
            if (checked != null && checked) {
                hasSelected = true;
                break;
            }
        }
        if (!hasSelected) {
            XDialog.alert("Vui lòng chọn sản phẩm cần xóa!");
            return;
        }
        if (XDialog.confirm("Bạn có chắc chắn muốn xóa sản phẩm đã chọn không?")) {
            for (int i = 0; i < tblCTHD.getRowCount(); i++) {
                Boolean checked = (Boolean) tblCTHD.getValueAt(i, 0);
                if (checked != null && checked) {
                    cthdDao.deleteById(cthd.get(i).getMahd());
                }
            }
            this.fillCTHD();
            XDialog.alert("Đã xóa sản phẩm thành công!");
        }  
//        for (int i = 0; i < tblCTHD.getRowCount(); i++) {
//            Boolean checked = (Boolean) tblCTHD.getValueAt(i, 0);
//            if (checked) {
//                cthdDao.deleteById(cthd.get(i).getMahd());
//            }
//        }
//        this.fillCTHD();
    }

    @Override
    public void updateSoLuong() {
        String input = XDialog.prompt("Số lượng mới?");
        if (input != null && input.trim().length() > 0) {
            try {
                int soluong = Integer.parseInt(input.trim());
                if (soluong <= 0) {
                    XDialog.alert("Số lượng phải lớn hơn 0!");
                    return;
                }
                int selectedRow = tblCTHD.getSelectedRow();
                if (selectedRow >= 0) {
                    CTHD detail = cthd.get(selectedRow);
                    detail.setSoluong(soluong);
                    cthdDao.update(detail);
                    this.fillCTHD();
                }
            } catch (NumberFormatException e) {
                XDialog.alert("Vui lòng nhập số hợp lệ!");
            }
        }
//            String input = XDialog.prompt("Số lượng mới?");
//            if (input != null && input.length() > 0) {
//                CTHD detail = cthd.get(tblCTHD.getSelectedRow());
//                detail.setSoluong(Integer.parseInt(input));
//                cthdDao.update(detail);
//                this.fillCTHD();
//            }
    }

    private void setForm(HoaDon hoadon) {
        txtSoHD.setText(String.valueOf(hoadon.getSohd()));
        txtMaNV.setText(String.valueOf(hoadon.getManv()));
        if (hoadon.getNghd()!= null) {
            txtNGHD.setText(XDate.format(hoadon.getNghd(), "dd/MM/yyyy HH:mm:ss"));
        }

        boolean editable = true;
        btnAdd.setEnabled(editable);
        btnCancel.setEnabled(editable);
        btnCheckout.setEnabled(editable);
        btnRemove.setEnabled(editable);
    }
    
    void fillCTHD(){
        cthd = cthdDao.findBySOHD(hoadon.getSohd());
        // Lấy danh sách chi tiết hóa đơn từ DB (dựa vào mã hóa đơn hiện tại hd)
//        List<CTHD> cthdList = cthdDao.findBySOHD(hd.getSohd());

        DefaultTableModel model = (DefaultTableModel) tblCTHD.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trên bảng

        cthd.forEach(ct -> {
            Object[] row = {
                false, // Checkbox nếu có
                ct.getMahd(), // Mã chi tiết hóa đơn
                ct.getSohd(), // Số hóa đơn
                ct.getMasp(), // Mã sản phẩm
                ct.getTensp(),  // ✅ Thêm dòng này nếu cần hiển thị tên SP
                String.format("%,.0fđ", ct.getDongia()), // Đơn giá (format có đơn vị đ)
                ct.getSoluong(), // Số lượng
                String.format("%,.0fđ", ct.getDongia() * ct.getSoluong()) // Thành tiền
            };
            model.addRow(row);
        });
    }
    @Override
    public void checkout() {
        if (cthd.isEmpty()) {
            XDialog.alert("Không thể thanh toán hóa đơn trống!");
            return;
        }

        if (!XDialog.confirm("Bạn muốn thanh toán hoá đơn?")) {
            return; // người dùng hủy
        }

        // 1. Cập nhật hóa đơn hiện tại là đã thanh toán
        hoadon.setNghd(new Date()); // ngày thanh toán
        hoadonDao.update(hoadon);
        this.setForm(hoadon);
        XDialog.alert("Thanh toán thành công!");

        // 2. Làm mới bảng hóa đơn (nếu có)
        fillCTHD(); // ✅ load lại danh sách hóa đơn để hiển thị

        // 3. Tạo hóa đơn mới (trạng thái chưa thanh toán)
        HoaDon newHoaDon = new HoaDon();
        newHoaDon.setManv(XAuth.user.getManv());
        newHoaDon.setNghd(null); // chưa thanh toán
        hoadon = hoadonDao.create(newHoaDon); // Lấy hóa đơn mới vừa tạo

        // 4. Làm mới chi tiết hóa đơn & form
        cthd.clear();
        fillCTHD();
        setForm(hoadon);
    }

//    @Override
//    public void checkout() {
//        if (cthd.isEmpty()) {
//            XDialog.alert("Không thể thanh toán hóa đơn trống!");
//            return;
//        }
//        
//        if (XDialog.confirm("Bạn muốn thanh toán hoá đơn?")) {
//            hoadon.setNghd(new Date());
//            hoadonDao.update(hoadon);
//            this.setForm(hoadon);
//            XDialog.alert("Thanh toán thành công!");
//        }
//    }

}
